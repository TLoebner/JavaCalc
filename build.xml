<?xml version="1.0"?>   
<project name="java-junit-template-project" default="test" basedir=".">
  <property name="main.build.dir" value="build/main" />  
  <property name="main.src.dir" value="src" />
  <property name="test.build.dir" value="build/test" />
  <property name="test.src.dir" value="test" />
  <property name="doc.dir" value="doc" />
  <property name="uml.dir" value="uml" />
  <property name="ps" value="${path.separator}"/>

  <path id="classpath.base" />

  <path id="classpath.test">
    <pathelement location="lib/junit-4.11.jar" />
    <pathelement location="lib/hamcrest-core-1.3.jar" />
    <pathelement location="${main.build.dir}"/>
    <path refid="classpath.base" />
  </path>

  <target name="test" depends="run, clean, UML_doc" />

  <target name="compile">
    <mkdir dir="${main.build.dir}"/>
    <javac srcdir="${main.src.dir}" destdir="${main.build.dir}" includeantruntime="false">
      <classpath refid="classpath.base"/>
    </javac>
  </target>

  <target name="build" depends="compile">
    <mkdir dir="${test.build.dir}"/>
    <javac srcdir="${test.src.dir}" destdir="${test.build.dir}" includeantruntime="false">
        <classpath refid="classpath.test"/>
    </javac>
    <echo message="Build done" />
  </target>
   
  <!-- Test and build all files  -->
  <!-- To run this: use "ant" (default) or "ant run" -->
  <target name="run" depends="build">
    <junit printsummary="on" haltonfailure="yes">
        <classpath>
          <path refid="classpath.test" />
          <pathelement location="${test.build.dir}"/>
        </classpath>
        <formatter type="brief" usefile="false" />
        <batchtest>
            <fileset dir="${test.src.dir}" includes="**/*Test*.java" />
	    <fileset dir="${test.src.dir}" includes="**/*IT*.java" />
        </batchtest>
    </junit>
  </target>
   
  <target name="doc" depends="compile" description="generate documentation">
      <javadoc destdir="${doc.dir}">
        <classpath>
          <path refid="classpath.test" />
          <pathelement location="${test.build.dir}"/>
        </classpath>
          <fileset dir="${main.src.dir}" includes="**/*.java" />
          <fileset dir="${test.src.dir}" includes="**/*.java" />
      </javadoc>
  </target>  
    <target name="UML_doc" depends="doc" description="Creates the UML">
        <mkdir dir="${uml.dir}"/>
       <javadoc destdir="${uml.dir}">
        <classpath>
          <path refid="classpath.test" />
          <pathelement location="${test.build.dir}"/>
        </classpath>
          <fileset dir="${main.src.dir}" includes="**/*.java" />
          <fileset dir="${test.src.dir}" includes="**/*.java" />
            <doclet
                name="ydoc.doclets.YStandard"
                path="./lib/ydoc.jar${ps}./resources${ps}.${uml.dir}">
                <param name="-author"/>
                <param name="-generic"/>
                <param name="-umlautogen"/>
                <param name="-filterpath" value="./lib/ydoc.jar"/>
                <param name="-filter"     value="ydoc.filters.ExcludeFilter"/>
                <param name="-tag" value="y.precondition"/>
                <param name="-tag" value="y.postcondition"/>
                <param name="-tag" value="y.complexity"/>
                <param name="-tag" value="param"/>
                <param name="-tag" value="return"/>
                <param name="-tag" value="see"/>
                <param name="-tag" value="y.uml"/>
                <param name="-umlfileformat" value="PNG"/>
            </doclet>
      </javadoc>
    </target>
  
  <!-- delete all class files -->
  <!-- To run this: use "ant clean" -->
  <target name="clean">
    <delete>
        <fileset dir="${basedir}" includes="**/*.class" />        
	<fileset dir="${doc.dir}" />
        <fileset dir="${uml.dir}" />
    </delete>
    <echo message="clean done" />
  </target>
</project>
